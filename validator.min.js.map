{"version":3,"sources":["lib/validator.js"],"names":["global","factory","exports","module","jsonlint","require","Ajv","requireSchemaDraft","environment","define","amd","schemaDrafts","self","jsonlintSchemaDrafts","jsonlintValidator","this","addErrorLocation","problem","input","tokens","dataPath","token","find","pathToPointer","path","location","start","offset","line","column","texts","getErrorTexts","reason","message","excerpt","pointer","errorToProblem","error","schemaPath","createError","errors","data","options","JSON","stringify","undefined","Object","assign","tokenLocations","tokenPaths","tokenize","SyntaxError","createAjv","ajvOptions","jsonPointers","ajv","schemaId","addMetaSchema","RangeError","compileSchema","schema","parseOptions","parsed","parse","compile","originalError","betterError","String","mode","ignoreComments","ignoreTrailingCommas","allowSingleQuotedStrings","allowDuplicateObjectKeys","validate","defineProperty","value"],"mappings":"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","file":"validator.js","sourcesContent":["(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    const jsonlint = require('./jsonlint')\n    const Ajv = require('ajv')\n    // eslint-disable-next-line no-inner-declarations\n    function requireSchemaDraft (environment) {\n      return require('ajv/lib/refs/' + environment + '.json')\n    }\n    factory(exports, Ajv, jsonlint, requireSchemaDraft)\n    // eslint-disable-next-line no-undef\n  } else if (typeof define === 'function' && define.amd) {\n    // eslint-disable-next-line no-undef\n    define('jsonlint-validator', ['exports', 'ajv', 'jsonlint', 'jsonlint-schema-drafts'],\n      function (exports, jsonlint, Ajv, schemaDrafts) {\n        function requireSchemaDraft (environment) {\n          return schemaDrafts[environment]\n        }\n        factory(exports, Ajv, jsonlint, requireSchemaDraft)\n      })\n  } else {\n    // eslint-disable-next-line no-undef\n    global = global || self\n    const requireSchemaDraft = function (environment) {\n      return global.jsonlintSchemaDrafts[environment]\n    }\n    factory(global.jsonlintValidator = {}, global.Ajv, global.jsonlint, requireSchemaDraft)\n  }\n}(this, function (exports, Ajv, jsonlint, requireSchemaDraft) {\n  'use strict'\n\n  function addErrorLocation (problem, input, tokens, dataPath) {\n    const token = tokens.find(function (token) {\n      return dataPath === jsonlint.pathToPointer(token.path)\n    })\n    if (token) {\n      const location = token.location.start\n      const offset = location.offset\n      const line = location.line\n      const column = location.column\n      const texts = jsonlint.getErrorTexts(problem.reason, input, offset, line, column)\n      problem.message = texts.message\n      problem.excerpt = texts.excerpt\n      if (texts.pointer) {\n        problem.pointer = texts.pointer\n        problem.location = {\n          start: {\n            column,\n            line,\n            offset\n          }\n        }\n      }\n      return true\n    }\n  }\n\n  function errorToProblem (error, input, tokens) {\n    const dataPath = error.dataPath\n    const schemaPath = error.schemaPath\n    const reason = (dataPath || '/') + ' ' + error.message + '; see ' + schemaPath\n    const problem = {\n      reason,\n      dataPath,\n      schemaPath\n    }\n    if (!addErrorLocation(problem, input, tokens, dataPath)) {\n      problem.message = reason\n    }\n    return problem\n  }\n\n  function createError (errors, data, input, options) {\n    if (!input) {\n      input = JSON.stringify(data, undefined, 2)\n    }\n    if (!options) {\n      options = {}\n    }\n    Object.assign(options, {\n      tokenLocations: true,\n      tokenPaths: true\n    })\n    const tokens = jsonlint.tokenize(input, options)\n    // var problems = errors.map(function (error) {\n    //   return errorToProblem(error, input, tokens)\n    // })\n    // var message = problems\n    //   .map(function (problem) {\n    //     return problem.message\n    //   })\n    //   .join('\\n')\n    const problem = errorToProblem(errors[0], input, tokens)\n    const error = new SyntaxError(problem.message)\n    Object.assign(error, problem)\n    return error\n  }\n\n  function createAjv (environment) {\n    const ajvOptions = { jsonPointers: true }\n    let ajv\n    if (!environment) {\n      ajvOptions.schemaId = 'auto'\n      ajv = new Ajv(ajvOptions)\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-04'))\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-06'))\n    } else if (environment === 'json-schema-draft-07') {\n      ajv = new Ajv(ajvOptions)\n    } else if (environment === 'json-schema-draft-06') {\n      ajv = new Ajv(ajvOptions)\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-06'))\n    } else if (environment === 'json-schema-draft-04') {\n      ajvOptions.schemaId = 'id'\n      ajv = new Ajv(ajvOptions)\n      ajv.addMetaSchema(requireSchemaDraft('json-schema-draft-04'))\n    } else {\n      throw new RangeError('Unsupported environment for the JSON schema validation: \"' +\n        environment + '\".')\n    }\n    return ajv\n  }\n\n  function compileSchema (ajv, schema, parseOptions) {\n    let parsed\n    try {\n      parsed = jsonlint.parse(schema, parseOptions)\n    } catch (error) {\n      error.message = 'Parsing the JSON schema failed.\\n' + error.message\n      throw error\n    }\n    try {\n      return ajv.compile(parsed)\n    } catch (originalError) {\n      const errors = ajv.errors\n      const betterError = errors\n        ? createError(errors, parsed, schema, parseOptions)\n        : originalError\n      betterError.message = 'Compiling the JSON schema failed.\\n' + betterError.message\n      throw betterError\n    }\n  }\n\n  function compile (schema, environment) {\n    let options = {}\n    if (typeof environment === 'object' && !(environment instanceof String)) {\n      options = environment\n      environment = options.environment\n    }\n    const ajv = createAjv(environment)\n    const parseOptions = {\n      mode: options.mode,\n      ignoreComments: options.ignoreComments,\n      ignoreTrailingCommas: options.ignoreTrailingCommas,\n      allowSingleQuotedStrings: options.allowSingleQuotedStrings,\n      allowDuplicateObjectKeys: options.allowDuplicateObjectKeys\n    }\n    const validate = compileSchema(ajv, schema, parseOptions)\n    return function (data, input, options) {\n      if (typeof data === 'string' || data instanceof String) {\n        options = input\n        input = data\n        data = jsonlint.parse(input, options)\n      } else if (!(typeof input === 'string' || input instanceof String)) {\n        options = input\n        input = undefined\n      }\n      if (validate(data)) {\n        return data\n      }\n      throw createError(validate.errors, data, input, options)\n    }\n  }\n\n  exports.compile = compile\n\n  Object.defineProperty(exports, '__esModule', { value: true })\n}))\n"]}