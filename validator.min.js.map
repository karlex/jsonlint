{
  "version": 3,
  "sources": ["../lib/validator.js"],
  "sourcesContent": ["(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    const jsonlint = require('./jsonlint')\n    const ajv = {\n      Ajv04: 'ajv-draft-04',\n      Ajv07: 'ajv',\n      AjvJTD: 'ajv/dist/jtd',\n      Ajv2019: 'ajv/dist/2019',\n      Ajv2020: 'ajv/dist/2020',\n      Schema06: 'ajv/dist/refs/json-schema-draft-06.json'\n    }\n    const requireAjv = name => {\n      const exported = require(ajv[name])\n      return !exported.$schema && exported.default || exported\n    }\n    factory(exports, jsonlint, requireAjv)\n  } else if (typeof define === 'function' && define.amd) {\n    define('jsonlint-validator', ['exports', 'jsonlint', 'ajv'],\n      function (exports, jsonlint, ajv) {\n        const requireAjv = name => {\n          const exported = ajv[name]\n          return !exported.$schema && exported.default || exported\n        }\n        factory(exports, jsonlint, requireAjv)\n      })\n  } else {\n    global = global || self\n    const requireAjv = name => {\n      const exported = global.ajv[name]\n      return !exported.$schema && exported.default || exported\n    }\n    factory(global.jsonlintValidator = {}, global.jsonlint, requireAjv)\n  }\n}(this, function (exports, jsonlint, requireAjv) {\n  'use strict'\n\n  function addErrorLocation (problem, input, tokens, dataPath) {\n    const token = tokens.find(function (token) {\n      return dataPath === jsonlint.pathToPointer(token.path)\n    })\n    if (token) {\n      const location = token.location.start\n      const offset = location.offset\n      const line = location.line\n      const column = location.column\n      const texts = jsonlint.getErrorTexts(problem.reason, input, offset, line, column)\n      problem.message = texts.message\n      problem.excerpt = texts.excerpt\n      if (texts.pointer) {\n        problem.pointer = texts.pointer\n        problem.location = {\n          start: {\n            column,\n            line,\n            offset\n          }\n        }\n      }\n      return true\n    }\n  }\n\n  function errorToProblem (error, input, tokens) {\n    const dataPath = error.dataPath\n    const schemaPath = error.schemaPath\n    const reason = (dataPath || '/') + ' ' + error.message + '; see ' + schemaPath\n    const problem = {\n      reason,\n      dataPath,\n      schemaPath\n    }\n    if (!addErrorLocation(problem, input, tokens, dataPath)) {\n      problem.message = reason\n    }\n    return problem\n  }\n\n  function createError (errors, data, input, options) {\n    if (!input) {\n      input = JSON.stringify(data, undefined, 2)\n    }\n    if (!options) {\n      options = {}\n    }\n    Object.assign(options, {\n      tokenLocations: true,\n      tokenPaths: true\n    })\n    const tokens = jsonlint.tokenize(input, options)\n    // var problems = errors.map(function (error) {\n    //   return errorToProblem(error, input, tokens)\n    // })\n    // var message = problems\n    //   .map(function (problem) {\n    //     return problem.message\n    //   })\n    //   .join('\\n')\n    const problem = errorToProblem(errors[0], input, tokens)\n    const error = new SyntaxError(problem.message)\n    Object.assign(error, problem)\n    return error\n  }\n\n  function createAjv (environment) {\n    let ajv\n    if (!environment || environment === 'json-schema-draft-06' || environment === 'draft-06') {\n      const Ajv = requireAjv('Ajv07')\n      ajv = new Ajv()\n      ajv.addMetaSchema(requireAjv('Schema06'))\n    } else if (environment === 'json-schema-draft-07' || environment === 'draft-07') {\n      const Ajv = requireAjv('Ajv07')\n      ajv = new Ajv()\n    } else if (environment === 'json-schema-draft-04' || environment === 'draft-04') {\n      const Ajv = requireAjv('Ajv04')\n      ajv = new Ajv()\n    } else if (environment === 'json-schema-draft-2019-09' || environment === 'draft-2019-09') {\n      const Ajv = requireAjv('Ajv2019')\n      ajv = new Ajv()\n    } else if (environment === 'json-schema-draft-2020-12' || environment === 'draft-2020-12') {\n      const Ajv = requireAjv('Ajv2020')\n      ajv = new Ajv()\n    } else if (environment === 'json-type-definition' || environment === 'jtd' || environment === 'rfc8927') {\n      const Ajv = requireAjv('AjvJTD')\n      ajv = new Ajv()\n    } else {\n      throw new RangeError('Unsupported environment for the JSON Schema validation: \"' +\n        environment + '\".')\n    }\n    return ajv\n  }\n\n  function compileSchema (ajv, schema, parseOptions) {\n    let parsed\n    try {\n      parsed = jsonlint.parse(schema, parseOptions)\n    } catch (error) {\n      error.message = 'Parsing the JSON Schema failed.\\n' + error.message\n      throw error\n    }\n    try {\n      return ajv.compile(parsed)\n    } catch (originalError) {\n      const errors = ajv.errors\n      const betterError = errors\n        ? createError(errors, parsed, schema, parseOptions)\n        : originalError\n      betterError.message = 'Compiling the JSON Schema failed.\\n' + betterError.message\n      throw betterError\n    }\n  }\n\n  function compile (schema, environment) {\n    let options = {}\n    if (typeof environment === 'object' && !(environment instanceof String)) {\n      options = environment\n      environment = options.environment\n    }\n    const ajv = createAjv(environment)\n    const parseOptions = {\n      mode: options.mode,\n      ignoreBOM: options.ignoreBOM,\n      ignoreComments: options.ignoreComments,\n      ignoreTrailingCommas: options.ignoreTrailingCommas,\n      allowSingleQuotedStrings: options.allowSingleQuotedStrings,\n      allowDuplicateObjectKeys: options.allowDuplicateObjectKeys\n    }\n    const validate = compileSchema(ajv, schema, parseOptions)\n    return function (data, input, options) {\n      if (typeof data === 'string' || data instanceof String) {\n        options = input\n        input = data\n        data = jsonlint.parse(input, options)\n      } else if (!(typeof input === 'string' || input instanceof String)) {\n        options = input\n        input = undefined\n      }\n      if (validate(data)) {\n        return data\n      }\n      throw createError(validate.errors, data, input, options)\n    }\n  }\n\n  exports.compile = compile\n\n  Object.defineProperty(exports, '__esModule', { value: true })\n}))\n"],
  "mappings": "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",
  "names": ["global", "factory", "jsonlint", "ajv", "requireAjv", "name", "exported", "exports", "addErrorLocation", "problem", "input", "tokens", "dataPath", "token", "location", "offset", "line", "column", "texts", "errorToProblem", "error", "schemaPath", "reason", "createError", "errors", "data", "options", "createAjv", "environment", "Ajv", "compileSchema", "schema", "parseOptions", "parsed", "originalError", "betterError", "compile", "validate"]
}
